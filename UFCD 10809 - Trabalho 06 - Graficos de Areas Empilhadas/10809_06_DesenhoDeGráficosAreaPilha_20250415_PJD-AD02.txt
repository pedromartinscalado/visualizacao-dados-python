*******************************************************************
******************************************************************* 
06.  Desenho de Gráficos de Area 
     - Área em Pilha ou Empilhados ("Stack Plot")
*******************************************************************
*******************************************************************



06.00 Ponto de Partida


06.01 Arranque do Jupyter Notebook
      Criação da Pasta do Capítulo


06.02 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - Introdução

06.03 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - Com Percentagem

06.04 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - 

06.05 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - 

06.06 Resumo do capítulo

06.07 Bibliografia/Sitografia-Webgrafia

06.08 Trabalho(s)/Tarefa(s)




06.00 Ponto de Partida
--------------------------------------------------------------
--------------------------------------------------------------


   Para que servem os
             Área em Pilha ("Stack Plot")?
  
   1. Compreender os Gráficos Empilhados
      Definição: Um gráfico empilhado é uma variação 
                 do gráfico de áreas, onde diferentes séries
                 de dados são empilhadas umas sobre as outras.

      Objetivo: Mostrar as relações entre as partes e o todo, 
                e como estas mudam ao longo do tempo ou em 
                relação a outra variável contínua.

   2. Quando Usar Gráficos Empilhados
      Para visualizar dados acumulativos 
      (por exemplo, vendas totais em várias regiões).
      Para mostrar as contribuições relativas de componentes para o total.
      Para acompanhar mudanças ao longo do tempo em múltiplas categorias.

   3. Passos para Criar um Gráfico Empilhado
      Exemplo de Cenário:
      Tens três categorias: Produto A, Produto B e Produto C, 
      com dados de vendas para cada um ao longo de cinco anos.

      Passo 1: Preparar os Dados
               Organiza os dados num formato onde tenhas:

      Uma variável contínua (por exemplo, anos: 2018, 2019, 2020, 2021, 2022).
      Dados para cada categoria (por exemplo, valores de vendas para os 
           Produtos A, B e C).

      Passo 2: Representar os Dados
               Usa uma ferramenta como Python, Excel ou outro 
               software de visualização para criar o gráfico empilhado.

   4. Criar um Gráfico Empilhado com Python
      Aqui está um exemplo utilizando a biblioteca matplotlib do Python:

python
Copiar código
import matplotlib.pyplot as plt

# Dados de exemplo
anos = [2018, 2019, 2020, 2021, 2022]
produto_a = [20, 25, 30, 35, 40]
produto_b = [15, 20, 25, 30, 35]
produto_c = [10, 15, 20, 25, 30]

# Criar o gráfico empilhado
plt.stackplot(anos, produto_a, produto_b, produto_c, labels=['Produto A', 'Produto B', 'Produto C'], alpha=0.8)

# Adicionar rótulos e legenda
plt.title('Vendas ao Longo do Tempo')
plt.xlabel('Ano')
plt.ylabel('Vendas')
plt.legend(loc='upper left')
plt.show()


   5. Vantagens dos Gráficos Empilhados
      Visualização Clara: Mostra tendências totais e 
      contribuições individuais ao mesmo tempo.

      Relações Parte-Todo: Destaca como as categorias 
      contribuem para o total ao longo do tempo.

      Comparações Fáceis: Ajuda a comparar tendências entre categorias.

   6. Casos de Utilização para Gráficos Empilhados
      Finanças: Mostrar fontes de receita de diferentes 
                produtos ou serviços ao longo do tempo.
      Energia: Visualizar o consumo de energia por fonte 
               (ex.: carvão, solar, eólica).
      Marketing: Mostrar as origens de tráfego 
               (ex.: direto, orgânico, pago) ao longo dos meses.

      Saúde: Acompanhar a contribuição de diferentes doenças 
             para o número total de pacientes.

   7. Dicas para Gráficos Empilhados Eficazes
       Usar Cores Distintas: Garante que cada categoria 
            seja facilmente distinguível.
       Limitar o Número de Categorias: 
       Muitas categorias podem tornar o gráfico confuso.

       Incluir uma Legenda: Rotular claramente cada categoria 
       para melhor compreensão.

       Verificar o Intervalo de Dados: 
       Certificar-se de que os valores são adequados 
       para empilhamento (ex.: valores não-negativos).


   8. Alternativas aos Gráficos Empilhados
      Se os dados forem muito complexos ou houver muitas categorias, 
      considera alternativas como:

   Gráficos de Barras Agrupadas: Para comparações lado a lado.
   Gráficos de Linhas: Para focar em tendências sem empilhamento.

   Os gráficos empilhados são poderosos para visualizar dados
   acumulativos e compreender contribuições ao longo do tempo, 
   tornando-os uma ferramenta valiosa na análise e comunicação de dados.


Definir o cubo OLAP de grandezas e utilizar o gráfico.

****************************************************************



06.01 Arranque do Jupyter Notebook
      Criação da Pasta do Capítulo
--------------------------------------------------------------
--------------------------------------------------------------

 a.1) Jupyter Notebook Instalado - Executar

   - Sem utilizar o Anaconda (mais rápido):

    Na lupa do SO digitar:
       - Jupyter
    Clicar na aplicação 
    Abre a consola com indicação dos "logs" do servidor.
 

   - Formas de arrancar com o Jupyter:
  
     1. Com o Anaconda Navigator instalado, 
        esperar que o "builder" conclua criação da plataforma.
        - Na lista de ferramentas disponiveis, escolher
         "Jupyter Notebook".  

        Arranca a consola:

         Se com a consola ativada não arrancar o browser:

            Copiar link com o token


     2. Com o Anaconda Navigator instalado, na lupa do SO digitar:

        Jupyter Notebook

        Clicar no icone da aplicação

        Arranca a consola:

         Se com a consola ativada não arrancar o browser:

            Copiar link com o token

     3. Com o Anaconda Navigator instalado, na lupa do SO digitar:

        Anaconda powershell prompt

        Clicar no icone da aplicação 

        Digitar       
      
           Jupyter Notebook


        Arranca a consola:

         Se com a consola ativada não arrancar o browser:

            Copiar link com o token


 a.2) Criar pasta para o capítulo

   Na página de entrada do Jupyter Notebook,
   na árvore de diretorias, TDR
   - New Folder
   - Projeto UFCD10809_Cap06_GraficosArea

  Para entrar nessa pasta:
   - Duplo clique.



**************************************************************


06.02 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - Introdução
--------------------------------------------------------------
--------------------------------------------------------------

 -> Na pasta do capítulo,
    criar um novo ficheiro Jupyter Notebook
    com o nome:

    "0602_DesenhoGráficoArea.ipynb"
    
    Menu "File" -> New -> Notebook



################################
# Cell 01:
################################

<h1> Gráficos de Área em Pilha - "Stack Plot" </h1>


<h1 style="background-color:black;color:white;padding-top:10px;text-align:center;font-weight:bold;font-style:italic;font-size:2cm;padding-bottom:30px;">Gráficos de Área em Pilha - "Stack Plot" </h1>

 Markdown
 SHIFT + ENTER

################################
# Cell 02:
################################

<div style="margin-left:2%;">
<img style="float:left;margin:2px;height:150px;" src="https://vivirenelpoblado.com/wp-content/uploads/2023/11/Gamers-Inder-09-scaled.jpg" width="32%"/>
<img style="float:left;margin:2px;height:150px;" src="https://www.laopinion.co/sites/default/files/2020/12/15/imagen/videojuegos.jpg" width="32%"/>
<img style="float:left;margin:2px;height:150px;" src="https://www.universitymagazine.ca/wp-content/uploads/2024/10/Countries-With-The-Most-Gamers.jpg" width="32%"/>

</div>



 Markdown
 SHIFT + ENTER


################################
# Cell 03:
################################

<h2> Criação de "Stack Plot" </h2>

<h2 style="background-color:orange;color:white;padding-top:10px;text-align:center;font-weight:bold;font-style:italic;font-size:1cm;padding-bottom:20px;"> Criação de "Stack Plot"  </h2>



 Markdown
 SHIFT + ENTER


################################
# Cell 04:
################################

# 01. Importar:
#     Bibliotecas: matplotlib, numpy
#     Módulos: pyplot
from matplotlib import pyplot as plt


# 02. Valore(s) do(s) gráfico(s)
minutes = [1, 2, 3, 4, 5, 6, 7, 8, 9]
player1 = [8, 6, 5, 5, 4, 2, 1, 1, 0]
player2 = [0, 1, 2, 2, 2, 4, 4, 4, 4]
player3 = [0, 1, 1, 1, 2, 2, 3, 3, 4]


# 03. Estilo do Gráfico, Rótulos e Cores
plt.style.use("fivethirtyeight")
labels = ["Jogador1","Jogador2","Jogador3"]
colors = ["#6d904f","#fc4f30","#008fd5"]


# 04. Definição e configuração do gráfico
plt.stackplot(minutes,player1,player2,player3 , labels = labels , colors = colors)

# 05. Título, Legenda e Tipo de Layout
plt.title("My Awesome Stack Plot")
plt.legend(loc = (0.7,0.5))
plt.tight_layout()


# 06. Apresentação do gráfico
plt.show()

# Colors:
# Blue = #008fd5
# Red = #fc4f30
# Yellow = #e5ae37
# Green = #6d904f


********************************************************************




06.03 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - Com Percentagem
--------------------------------------------------------------
--------------------------------------------------------------



 -> Na pasta do capítulo,
    criar um novo ficheiro Jupyter Notebook
    com o nome:

    "0603_DesenhoGráficoArea_Percentagem.ipynb"
    
    Menu "File" -> New -> Notebook


################################
# Cell 01:
################################

<h1> Gráficos de Área em Pilha - "Stack Plot" </h1>


<h1 style="background-color:black;color:white;padding-top:10px;text-align:center;font-weight:bold;font-style:italic;font-size:2cm;padding-bottom:30px;">Gráficos de Área em Pilha - "Stack Plot" </h1>

 Markdown
 SHIFT + ENTER

################################
# Cell 02:
################################

<div style="margin-left:2%;">
<img style="float:left;margin:2px;height:150px;" src="https://vivirenelpoblado.com/wp-content/uploads/2023/11/Gamers-Inder-09-scaled.jpg" width="32%"/>
<img style="float:left;margin:2px;height:150px;" src="https://www.laopinion.co/sites/default/files/2020/12/15/imagen/videojuegos.jpg" width="32%"/>
<img style="float:left;margin:2px;height:150px;" src="https://www.universitymagazine.ca/wp-content/uploads/2024/10/Countries-With-The-Most-Gamers.jpg" width="32%"/>

</div>



 Markdown
 SHIFT + ENTER


################################
# Cell 03:
################################

<h2> "Stack Plot" - Totais em % </h2>

<h2 style="background-color:orange;color:white;padding-top:10px;text-align:center;font-weight:bold;font-style:italic;font-size:1cm;padding-bottom:20px;"> "Stack Plot" - Totais em %  </h2>



 Markdown
 SHIFT + ENTER


################################
# Cell 04:
################################


# 01. Importar:
#     Bibliotecas: matplotlib, numpy
#     Módulos: pyplot
import numpy as np
import matplotlib.pyplot as plt


# 02. Valore(s) do(s) gráfico(s)
# Sample data
data = np.array([[10, 20, 30, 40], [20, 30, 10, 40], [30, 10, 20, 40]])

# 03. Obtenção dos totais
# Calculate totals for each category
totals = np.sum(data, axis=0)

# 04. Obtenção das Percentagens de cada série
# Calculate percentages for each value in each category
percentages = data / totals[np.newaxis, :] * 100

# 05. Definição e configuração do gráfico
#Create a stacked plot
fig, ax = plt.subplots()
ax.stackplot(range(4), percentages, labels=['Category 1', 'Category 2', 'Category 3'])

# 06. Título, Rótulos dos Eixos e Legenda 
ax.set_title('100% Stacked Plot')
ax.set_xlabel('X axis label')
ax.set_ylabel('Y axis label')
ax.legend(loc='upper left')


# 07. Apresentação do gráfico
plt.show() 


################################
# Cell 05:
################################


# 01. Importar:
#     Bibliotecas: matplotlib, numpy
#     Módulos: pyplot
import numpy as np
import matplotlib.pyplot as plt


# 02. Valore(s) do(s) gráfico(s)
# Sample data
data = np.array([[10, 20, 30, 40], [20, 30, 10, 40], [30, 10, 20, 40]])

# 03. Obtenção dos totais
# Calculate totals for each category
totals = np.sum(data, axis=0)

# 04. Obtenção das Percentagens de cada série
# Calculate percentages for each value in each category
percentages = data / totals[np.newaxis, :] * 100

# 05. Definição e configuração do gráfico
#Create a stacked plot
fig, ax = plt.subplots()
ax.stackplot(range(4), percentages, labels=['Loja 1', 'Loja 2', 'Loja 3'])

# 06. Título, Rótulos dos Eixos e Legenda 
ax.set_title('Lojas de Pronto-a-Vestir "Pega&Leva"')
ax.set_xlabel('Trimestre 2025')
ax.set_ylabel('Percentagem de Vendas')
ax.legend(loc='upper left')


# 07. Apresentação do gráfico
plt.show() 

********************************************************************





06.04 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - 
--------------------------------------------------------------
--------------------------------------------------------------

 

**************************************************************






06.05 Desenho de Gráficos de Área em Pilha ("Stack Plot"):
      - 
--------------------------------------------------------------
--------------------------------------------------------------


******************************************************************








06.06 Resumo do capítulo
--------------------------------------------------------------
--------------------------------------------------------------





********************************************************************



06.07 Bibliografia/Sitografia-Webgrafia
--------------------------------------------------------------
--------------------------------------------------------------


06.07.01 Bibliografia
06.07.02 Sitografia-Webgrafia



06.07.01 Bibliografia
-----------------------------------------------------------

Bibliografia:

[B01]	ESTRUTURAS DE DADOS E ALGORITMOS EM C - 3ª EDIÇÃO REVISTA E AUMENTADA, 
        António Adrego da Rocha, FCA.

[B02]	ANÁLISE DA COMPLEXIDADE DE ALGORITMOS, António Adrego da Rocha, FCA.

[B03]	ESTRUTURAS DE DADOS E ALGORITMOS EM JAVA, António Adegro da Rocha, FCA.

[B04]	ANÁLISE INTELIGENTE DE DADOS - ALGORITMOS E IMPLEMENTAÇÃO EM JAVA,
        Miguel Rocha | Paulo Cortez | José Maia Neves, FCA.

[B05]	PROGRAMAÇÃO EM C++ - ALGORITMOS E ESTRUTURAS DE DADOS, 
        Pimenta Rodrigues | Pedro Pereira | Manuela Sousa, FCA.

[B06]	PROGRAMAÇÃO EM C++ - CONCEITOS BÁSICOS E ALGORITMOS, 
        Pimenta Rodrigues | Pedro Pereira | Manuela Sousa, FCA.

[B07]	PYTHON - ALGORITMIA E PROGRAMAÇÃO WEB, 
        José Braga de Vasconcelos, FCA.

[B08]	EXERCÍCIOS DE JAVA - ALGORITMIA E PROGRAMAÇÃO ESTRUTURADA, 
        Adelaide Carvalho, FCA.

[B09]	PRÁTICAS DE C# - ALGORITMIA E PROGRAMAÇÃO ESTRUTURADA, Adelaide Carvalho, FCA.

[B10]	INTRODUÇÃO À ALGORITMIA E PROGRAMAÇÃO COM PYTHON
        Filipe Portela | Tiago C. Pereira, FCA.

[B11]	PRÁTICAS DE PYTHON - ALGORITMIA E PROGRAMAÇÃO
        Adelaide Carvalho, FCA.

[B12]	CIÊNCIA DOS DADOS NAS ORGANIZAÇÕES - APLICAÇÕES EM PYTHON
        José Braga de Vasconcelos | Alexandre Barão, FCA.

[B13]	PROGRAMAÇÃO EM PYTHON - FUNDAMENTOS E RESOLUÇÃO DE PROBLEMAS,
        Ernesto Costa, FCA.

[B14]	PYTHON - ALGORITMIA E PROGRAMAÇÃO WEB
        José Braga de Vasconcelos, FCA.

[B15]	PYTHON - ALGORITMIA E PROGRAMAÇÃO WEB, 
        José Braga de Vasconcelos, FCA.

***********************************************************************


06.07.02 Sitografia-Webgrafia
-----------------------------------------------------------

[W01]. https://www.python.org/
[W02]. https://pt.wikipedia.org/wiki/Python
[W03]. https://en.wikipedia.org/wiki/Python_(programming_language)
[W04]. https://www.tutorialspoint.com/python/index.htm
[W05]. https://www.w3schools.com/python/
[W06]. https://www.codecademy.com/catalog/language/python
[W07]. https://www.devmedia.com.br/guia/python/37024
[W08]. https://realpython.com/
[W09]. https://www.academiadecodigo.org
[W10]. https://www.pluralsight.com/
[W11]. https://www.datacamp.com/
[W12]. https://www.learnpython.org/
[W13]. https://pt.coursera.org/courses?query=python
[W14]. https://www.coursera.org/courses?query=python
[W15]. https://www.tutorialspoint.com/data_structures_algorithms/index.htm
[W16]. https://www.khanacademy.org/computing/computer-science/algorithms
[W17]. https://www.programiz.com/dsa
[W18]. https://www.programming4beginners.com/tutorial-beginners-algorithms
[W19]. https://hackr.io/tutorials/learn-data-structures-algorithms
[W20]. https://try.codecademy.com/learn-python-3
[W21]. https://codeforall.com/cursos-intensivos/bootcamp-programacao-full-stack
[W22]. https://docs.python.org/3/tutorial/index.html


***************************************************************




06.08 Trabalho(s)/Tarefa(s)
--------------------------------------------------------------
--------------------------------------------------------------






***************************************************************





